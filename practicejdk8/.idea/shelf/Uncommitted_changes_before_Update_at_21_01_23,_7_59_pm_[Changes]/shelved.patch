Index: src/practicejdk8/com/array/Array.java
===================================================================
diff --git a/src/practicejdk8/com/array/Array.java b/src/practicejdk8/com/array/Array.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/Array.java	
@@ -0,0 +1,27 @@
+package practicejdk8.com.array;
+
+interface My {
+    void show();
+    //String toString();
+}
+
+public class Array implements My {
+    public void show() {
+        System.out.println("Base");
+
+    }
+    public String toString() {
+        return "Hello sandy";
+    }
+    public static void main(String... r) {
+        My m = new Array();
+        m.show();
+        My m1 = new Array();
+        //String s=m1.toString();
+        System.out.println(m);
+        System.out.println(m1);
+        String s = m1.toString();
+        System.out.println(s);
+    }
+
+}
Index: src/practicejdk8/com/array/DiagonalwiseArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/DiagonalwiseArray.java b/src/practicejdk8/com/array/DiagonalwiseArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/DiagonalwiseArray.java	
@@ -0,0 +1,40 @@
+package practicejdk8.com.array;
+
+class DiagonalwiseArray {
+    /*first we have to show that 2D matrix*/
+    static void diago(int x[][]) {
+        int i, j;
+        System.out.println("the normal matrix is:\n");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+        System.out.println("\n");
+        /*from here coding of printing diagonalwise snake has been started*/
+        int k, count;
+        for (k = 0; k <= 4; k++)            //since we are hiring the valuue of i & j from above loop
+        {
+
+            count = 0;
+            for (i = 0; i < x.length; i++) {
+                for (j = 0; j < x[i].length; j++) {
+                    if (i + j == k && j % 2 == 0) {
+                        System.out.print("\t" + x[i][j]);
+                        count++;
+                    }
+                    if (i + j == k && j % 2 != 0) {
+                        System.out.print("\t" + x[i][j]);
+                        count++;
+                    }
+                }
+
+            }
+            System.out.println("");
+        }
+    }
+    public static void main(String... s) {
+        diago(new int[][]{{9, 3, 1}, {0, 6, 11}, {2, 9, 4}});
+    }
+}
\ No newline at end of file
Index: src/practicejdk8/com/array/Array1.java
===================================================================
diff --git a/src/practicejdk8/com/array/Array1.java b/src/practicejdk8/com/array/Array1.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/Array1.java	
@@ -0,0 +1,36 @@
+//package practicejdk8.com.array;
+//
+//public class Array1 {
+//
+//
+//    static void b2d(int x[][]) {
+//        int i, j, k, l, sum = 0;
+//        //k=x.length;
+//        //z=new int[k];
+//        System.out.println("\nthe normal binary form array is");
+//        for (i = 0; i < x.length; i++) {
+//            System.out.print("  " + x[i]);
+//        }
+//        for (i = 0; i < x.length - 1; i++) {
+//            if (x[i] == 0) {
+//                //z[i]=0;
+//                System.out.print("  " + 0);
+//            } else {
+//                sum = 0;
+//                k = 0;
+//                while (x[i] != 0) {
+//                    l = x[i] % 10;
+//                    sum += (2 ^ k) * l;
+//                    x[i] = x[i] / 10;
+//                    k++;
+//                }
+//                System.out.print("  " + sum);
+//            }
+//        }
+//    }
+//
+//    public static void main(String... s) {
+//        b2d(new int[][]{0, 10, 1, 101, 1100, 1110, 1011, 11});
+//    }
+//
+//}
Index: src/practicejdk8/com/array/MaxAndMinArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/MaxAndMinArray.java b/src/practicejdk8/com/array/MaxAndMinArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/MaxAndMinArray.java	
@@ -0,0 +1,30 @@
+package practicejdk8.com.array;
+
+public class MaxAndMinArray {
+
+    public static int max(int x[]) {
+        int largest = x[0];
+        for (int i = 0; i < x.length; i++) {
+            if (largest <= x[i]) {
+                largest = x[i];
+            }
+        }
+        return largest;
+    }
+    public static int min(int x[]) {
+        int smallest = x[0];
+        for (int i = 0; i < x.length; i++) {
+            if (smallest >= x[i]) {
+                smallest = x[i];
+            }
+        }
+        return smallest;
+    }
+    public static void main(String... s) {
+        MaxAndMinArray c = new MaxAndMinArray();
+        int a = max(new int[]{10, 3, 7, 9});
+        System.out.println(a);
+        int b = min(new int[]{10, 3, 7, 9});
+        System.out.println(b);
+    }
+}
Index: src/practicejdk8/com/array/LcmArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/LcmArray.java b/src/practicejdk8/com/array/LcmArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/LcmArray.java	
@@ -0,0 +1,36 @@
+package practicejdk8.com.array;
+
+public class LcmArray {
+
+    public static void lcm(int x[]) {
+        int i, j, k, count, pro = 1;
+        int largest = x[0];
+        for (i = 0; i < x.length; i++) {
+            if (largest <= x[i]) {
+                largest = x[i];
+            }
+        }
+        System.out.println(largest);
+        for (i = 2; i <= largest; i++) {
+            count = 0;
+            for (j = 0; j < x.length; j++) {
+                if (x[j] % i == 0) {
+                    x[j] = x[j] / i;
+                    count++;
+                }
+            }
+            if (count > 0) {
+                pro = pro * i;
+                i--;
+            }
+        }
+		/*for(i=0;i<x.length;i++)
+		{
+			pro=pro*x[i];
+		}*/
+        System.out.println("their lcm will be :" + pro);
+    }
+    public static void main(String... s) {
+        lcm(new int[]{12, 36, 18, 10});
+    }
+}
Index: src/practicejdk8/com/array/ArrayFrequency.java
===================================================================
diff --git a/src/practicejdk8/com/array/ArrayFrequency.java b/src/practicejdk8/com/array/ArrayFrequency.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/ArrayFrequency.java	
@@ -0,0 +1,33 @@
+package practicejdk8.com.array;
+
+public class ArrayFrequency {
+
+    public static void freq(int x[]) {
+        int i, j, count = 1;
+        int t[];
+        int k = x.length;
+        t = new int[k];
+        t[0] = 0;
+        System.out.println("\nthe normal array is");
+        for (i = 0; i < x.length; i++) {
+            System.out.print("  " + x[i]);
+        }
+        System.out.println("");
+        for (i = 0; i < x.length; i++) {
+            if (t[i] == 0) {
+                count = 1;
+                for (j = i + 1; j < x.length; j++) {
+                    if (x[i] == x[j]) {
+                        count++;
+                        t[j] = 1;
+                    }
+                }
+                System.out.println("the element: " + x[i] + "\thave frequency:" + count + "\n");
+            }
+        }
+    }
+
+    public static void main(String... s) {
+        freq(new int[]{10, 3, 7, 9, 2, 3, 3, 12, 1, 1, 9, 11, 13, 10, 3,});
+    }
+}
Index: src/practicejdk8/com/array/MatrixTransposeArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/MatrixTransposeArray.java b/src/practicejdk8/com/array/MatrixTransposeArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/MatrixTransposeArray.java	
@@ -0,0 +1,50 @@
+package practicejdk8.com.array;
+
+public class MatrixTransposeArray {
+
+    public static void trans(int x[][]) {
+        int i, j;
+        System.out.println("the first matrix is");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+        System.out.println("the transpose matrix is");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                System.out.print("\t" + x[j][i]);
+            }
+            System.out.println("");
+        }
+    }
+    static void msum(int x[][]) {
+        int i, j, sum, sum1 = 0;
+        System.out.println("their msum is: \n");
+        for (i = 0; i < x.length; i++) {
+            sum = 0;
+            for (j = 0; j < x[i].length; j++) {
+                sum += x[i][j];
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.print("\t\t" + sum + "\n");
+        }
+        System.out.println("\n");
+        for (i = 0; i < x.length; i++) {
+            sum = 0;
+            for (j = 0; j < x[i].length; j++) {
+                if (i == j) {
+                    sum1 += x[i][j];
+                }
+                sum += x[j][i];
+            }
+            System.out.print("\t" + sum);
+        }
+        System.out.print("\t\t" + sum1);
+    }
+    public static void main(String... s) {
+        trans(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+        msum(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+    }
+}
Index: src/practicejdk8/com/array/MatrixArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/MatrixArray.java b/src/practicejdk8/com/array/MatrixArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/MatrixArray.java	
@@ -0,0 +1,58 @@
+package practicejdk8.com.array;
+
+public class MatrixArray {
+
+    public static void add(int x[][], int y[][]) {
+        int i, j, sum;
+        System.out.println("the first matrix is");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+        System.out.println("the second matrix is");
+        for (i = 0; i < y.length; i++) {
+            for (j = 0; j < y[i].length; j++) {
+                System.out.print("\t" + y[i][j]);
+            }
+            System.out.println("");
+        }
+        if (x.length == y.length /*&& x[3].length==y[2].length*/) //why --j not?
+        {
+            System.out.println("their sum are: \n");
+            for (i = 0; i < x.length; i++) {
+                sum = 0;
+                for (j = 0; j < x[i].length; j++) {
+                    sum = sum + x[i][j] + y[i][j];
+                    System.out.print("\t" + sum);
+                    sum = 0;
+                }
+
+                System.out.println();
+            }
+        } else
+            System.out.println("oops!  their order are not same");
+    }
+
+    static void mul(int x[][], int y[][]) {
+        int i, j, k, sum;
+        System.out.println("their multiplication: \n");
+        for (k = 0; k < x.length; k++) {
+            for (i = 0; i < x[k].length; i++)
+            {
+                sum = 0;
+                for (j = 0; j < y.length; j++) {
+                    sum = sum + x[k][j] * y[j][i];
+                }
+                System.out.print("\t" + sum);
+            }
+            System.out.println("");
+        }
+    }
+
+    public static void main(String... s) {
+        add(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}}, new int[][]{{3, 9, 0}, {8, 2, 1}, {7, 0, 1}});
+        mul(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}}, new int[][]{{3, 9, 0}, {8, 2, 1}, {7, 0, 1}});
+    }
+}
Index: src/practicejdk8/com/array/MAtrixMergeArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/MAtrixMergeArray.java b/src/practicejdk8/com/array/MAtrixMergeArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/MAtrixMergeArray.java	
@@ -0,0 +1,47 @@
+package practicejdk8.com.array;
+
+public class MAtrixMergeArray {
+
+    public static void merge_sort(int x[], int y[]) {
+        int i, j, k, temp = 0, z[], m[];
+        k = x.length + y.length;
+        z = new int[k];
+        m = new int[k];
+        System.out.println("\nthe first array is:");
+        for (i = 0; i < x.length; i++) {
+            System.out.print("  " + x[i]);
+        }
+        System.out.println("\nthe second array is:");
+        for (i = 0; i < y.length; i++) {
+            System.out.print("  " + y[i]);
+        }
+        for (i = 0; i < x.length; i++) {
+            z[i] = x[i];
+        }
+        for (i = 0; i < y.length; i++) {
+            z[x.length + i] = y[i];
+        }
+        System.out.println("\nthe merge unsorted array: \n");
+        for (i = 0; i < z.length; i++) {
+            System.out.print("  " + z[i]);
+        }
+        for (i = 0; i < z.length - 1; i++) {
+            for (j = 0; j < z.length - 1 - i; j++) {
+                if (z[j] >= z[j + 1]) {
+                    temp = z[j];
+                    z[j] = z[j + 1];
+                    z[j + 1] = temp;
+                }
+            }
+            m[i] = z[j];
+        }
+        m[i] = z[0];
+        System.out.println("\nthe sorted merge array is\n");
+        for (i = 0; i < m.length; i++) {
+            System.out.print("\t" + m[i]);
+        }
+    }
+    public static void main(String... s) {
+        merge_sort(new int[]{90, 30, 10, 20, 3,}, new int[]{34, 22, 2, 20, 89});
+    }
+}
Index: src/practicejdk8/com/string/StringTraingle1.java
===================================================================
diff --git a/src/practicejdk8/com/string/StringTraingle1.java b/src/practicejdk8/com/string/StringTraingle1.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/string/StringTraingle1.java	
@@ -0,0 +1,22 @@
+package practicejdk8.com.string;
+
+/*      k	u	n	d	a	n
+        k	u	n	d	a
+        k	u	n	d
+        k	u	n
+        k	u
+        k*/
+public class StringTraingle1 {
+    static void triangle2(String s1) {
+        for (int i = 0; i < s1.length(); i++) {
+            for (int j = 0; j < s1.length() - i; j++) {
+                System.out.print(s1.charAt(j));
+                System.out.print("\t");
+            }
+            System.out.println(" ");
+        }
+    }
+    public static void main(String[] args) {
+        triangle2("kundan");
+    }
+}
Index: src/practicejdk8/com/string/StringWordSpaceCount.java
===================================================================
diff --git a/src/practicejdk8/com/string/StringWordSpaceCount.java b/src/practicejdk8/com/string/StringWordSpaceCount.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/string/StringWordSpaceCount.java	
@@ -0,0 +1,30 @@
+package practicejdk8.com.string;
+
+public class StringWordSpaceCount {
+    static int wordCount(String s)
+        {
+            System.out.println(s);
+            char ch[]=s.toCharArray();
+            int spc=0;
+            for(int i=0;i<ch.length;i++)
+            {
+                if(ch[i]==' ')
+                    spc=spc+1;
+            }
+            return spc+1;
+        }
+    public static void main(String[] args) {
+      int count=  wordCount("kundan kumar");
+
+        System.out.println("wolrd count is :"+count);
+
+
+        String s1 ="abc";
+        String s2 ="abc";
+        String s3 = new String("abc");
+        System.out.println(s1==s2);
+        System.out.println(s1==s3);
+    }
+
+
+}
Index: src/practicejdk8/com/array/MatrixArrayMax.java
===================================================================
diff --git a/src/practicejdk8/com/array/MatrixArrayMax.java b/src/practicejdk8/com/array/MatrixArrayMax.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/MatrixArrayMax.java	
@@ -0,0 +1,28 @@
+package practicejdk8.com.array;
+
+public class MatrixArrayMax {
+
+    public static void maxinrow(int x[][]) {
+        int i, j, count = 0;
+        System.out.println("the normal matrix is:\n");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+        System.out.println("\n");
+        for (i = 0; i < x.length; i++) {
+            count = 0;
+            for (j = 0; j < x[i].length; j++) {
+                if (x[i][j] == 1) {
+                    count++;
+                }
+            }
+            System.out.println("no. of 1 in row" + i + ":  " + count + "\n");
+        }
+    }
+    public static void main(String... s) {
+        maxinrow(new int[][]{{0, 0, 0, 1, 1}, {0, 1, 1, 1, 1}, {0, 0, 0, 0, 1}, {0, 0, 1, 1, 1}, {1, 1, 1, 1, 1}});
+    }
+}
Index: src/practicejdk8/com/array/ArrayShift.java
===================================================================
diff --git a/src/practicejdk8/com/array/ArrayShift.java b/src/practicejdk8/com/array/ArrayShift.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/ArrayShift.java	
@@ -0,0 +1,38 @@
+package practicejdk8.com.array;
+
+public class ArrayShift {
+
+    public static void shift(int x[]) {
+        int i, j, temp;
+        int z[];
+        int l = x.length;
+        z = new int[l];
+        System.out.println("\nthe normal array is");
+        for (i = 0; i < x.length; i++) {
+            System.out.print("  " + x[i]);
+        }
+        System.out.println("\nthe shifted array is: \n");
+        for (i = 0; i < x.length - 1; i++) {
+            for (j = 0; j < x.length - 1 - i; j++) {
+                if (x[j] >= x[j + 1] && x[j] >= 0) {
+                    temp = x[j];
+                    x[j] = x[j + 1];
+                    x[j + 1] = temp;
+                }
+                if (x[j] <= x[j + 1] && x[j] < 0 && x[j + 1] <= 0) {
+                    temp = x[j];
+                    x[j] = x[j + 1];
+                    x[j + 1] = temp;
+                }
+            }
+            z[x.length - 1 - i] = x[j];
+        }
+        for (i = 0; i < x.length; i++) {
+            System.out.print("  " + z[i]);
+        }
+    }
+    public static void main(String... s) {
+        shift(new int[]{10, 3, 7, 9, 19, -4, 0, 1, -2, -3, 5, 19});
+    }
+
+}
Index: src/practicejdk8/com/array/MaxMinArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/MaxMinArray.java b/src/practicejdk8/com/array/MaxMinArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/MaxMinArray.java	
@@ -0,0 +1,35 @@
+package practicejdk8.com.array;
+
+public class MaxMinArray {
+
+    static int max(int z[][]) {
+        int largest = z[0][0];
+        for (int i = 0; i < z.length; i++) {
+            for (int j = 0; j < z[i].length; j++) {
+                if (largest <= z[i][j]) {
+                    largest = z[i][j];
+                }
+            }
+        }
+        return largest;
+    }
+
+    static int min(int z[][]) {
+        int smallest = z[0][0];
+        for (int i = 0; i < z.length; i++) {
+            for (int j = 0; j < z[i].length; j++) {
+                if (smallest >= z[i][j]) {
+                    smallest = z[i][j];
+                }
+            }
+        }
+        return smallest;
+    }
+
+    public static void main(String... s) {
+        int a = max(new int[][]{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}});
+        System.out.println(a);
+        int b = min(new int[][]{{10, 20, 30}, {40, 50, 60}, {70, 80, 90}});
+        System.out.println(b);
+    }
+}
Index: src/practicejdk8/com/dataStructure/FabonacciSeriesJava.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package practicejdk8.com.dataStructure;\n\nimport java.util.Scanner;\n\n@Demo(name = \"kundan\")\npublic class FabonacciSeriesJava {\n\n\tpublic static void main(String[] args) {\n\n\t\tSystem.out.println(\"Enter First Number.\");\n\t\tScanner sc = new Scanner(System.in);\n\t\tint x = sc.nextInt();\n\t\tSystem.out.println(\"Enter Second Number.\");\n\t\tScanner sc1 = new Scanner(System.in);\n\t\tint y = sc1.nextInt();\n\t\t// min(x,y);\n\t\tint n = x;\n\t\tint a = 0;\n\t\tint b = 1;\n\t\tSystem.out.println(\" \\n\");\n\t\tSystem.out.println(\"Fabonnci Series :\");\n\t\tSystem.out.print(a + \" \" + b + \" \");\n\t\tint count = 0;\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tint nextNumber = a + b;\n\t\t\tSystem.out.print(\" \" + nextNumber);\n\t\t\ta = b;\n\t\t\tb = nextNumber;\n\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println(\"\\n\\ncount -:\" + count);\n\t}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/practicejdk8/com/dataStructure/FabonacciSeriesJava.java b/src/practicejdk8/com/dataStructure/FabonacciSeriesJava.java
--- a/src/practicejdk8/com/dataStructure/FabonacciSeriesJava.java	
+++ b/src/practicejdk8/com/dataStructure/FabonacciSeriesJava.java	
@@ -2,7 +2,7 @@
 
 import java.util.Scanner;
 
-@Demo(name = "kundan")
+//@Demo(name = "kundan")
 public class FabonacciSeriesJava {
 
 	public static void main(String[] args) {
Index: src/practicejdk8/com/array/ArrayTriangle.java
===================================================================
diff --git a/src/practicejdk8/com/array/ArrayTriangle.java b/src/practicejdk8/com/array/ArrayTriangle.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/ArrayTriangle.java	
@@ -0,0 +1,94 @@
+package practicejdk8.com.array;
+
+public class ArrayTriangle {
+
+
+    public static void a_sum(int x[][]) {
+        int i, j, sum = 0;
+        System.out.println("the first matrix is");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+        for (i = 0; i < x.length; i++) {
+            for (j = i; j < x[i].length; j++) {
+                sum += x[i][j];
+            }
+        }
+        System.out.println("the sum of A traingle elements are: " + sum + "\n");
+    }
+
+    public static void a_max(int x[][]) {
+        int i, j, largest = x[0][0];
+        for (i = 0; i < x.length; i++) {
+            for (j = i; j < x[i].length; j++) {
+                if (largest <= x[i][j]) {
+                    largest = x[i][j];
+                }
+            }
+        }
+        System.out.println("the largest element in A traingle is: " + largest + "\n");
+    }
+
+    public static void a_min(int x[][]) {
+        int i, j, smallest = x[0][0];
+        for (i = 0; i < x.length; i++) {
+            for (j = i; j < x[i].length; j++) {
+                if (smallest >= x[i][j]) {
+                    smallest = x[i][j];
+                }
+            }
+        }
+        System.out.println("the smallest element in A traingle is: " + smallest + "\n");
+    }
+
+    //the operation of B traingle starts from here
+    public static void b_sum(int x[][]) {
+        int i, j, sum = 0;
+        System.out.println("the first matrix is");
+        for (i = 1; i < x.length; i++) {
+            for (j = 0; j < i; j++) {
+                sum += x[i][j];
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+        System.out.println("the sum of B traingle elements are: " + sum + "\n");
+    }
+
+    public static void b_max(int x[][]) {
+        int i, j, largest = x[1][0];
+        for (i = 1; i < x.length; i++) {
+            for (j = 0; j < i; j++) {
+                if (largest <= x[i][j]) {
+                    largest = x[i][j];
+                }
+            }
+        }
+        System.out.println("the largest element in B traingle is: " + largest + "\n");
+    }
+
+    public static void b_min(int x[][]) {
+        int i, j, smallest = x[0][0];
+        for (i = 1; i < x.length; i++) {
+            for (j = 0; j < i; j++) {
+                if (smallest >= x[i][j]) {
+                    smallest = x[i][j];
+                }
+            }
+        }
+        System.out.println("the smallest element in B traingle is: " + smallest + "\n");
+    }
+
+    public static void main(String... s) {
+        a_sum(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+        a_max(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+        a_min(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+        b_sum(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+        b_max(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+        b_min(new int[][]{{10, 20, 2}, {3, 89, 76}, {11, 42, 8}});
+    }
+
+}
Index: src/practicejdk8/com/string/StringLength.java
===================================================================
diff --git a/src/practicejdk8/com/string/StringLength.java b/src/practicejdk8/com/string/StringLength.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/string/StringLength.java	
@@ -0,0 +1,17 @@
+package practicejdk8.com.string;
+
+public class StringLength {
+
+    static int length(String s)
+        {
+            System.out.println(s);
+            char ch[]=s.toCharArray();
+            int len=ch.length;
+            return len;
+        }
+
+    public static void main(String[] args) {
+        int lenght= length("kundan");
+        System.out.println("length is :"+lenght);
+    }
+}
Index: src/practicejdk8/com/array/ArraySort.java
===================================================================
diff --git a/src/practicejdk8/com/array/ArraySort.java b/src/practicejdk8/com/array/ArraySort.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/ArraySort.java	
@@ -0,0 +1,84 @@
+package practicejdk8.com.array;
+
+public class ArraySort {
+
+    public static void sort(int x[]) {
+        int j, temp, z[];
+        int i = x.length;
+        z = new int[i];
+        System.out.println("\nthe unsorted array is");
+        for (i = 0; i < x.length; i++) {
+            System.out.print("\t" + x[i]);
+        }
+        for (i = 0; i < x.length - 1; i++) {
+            for (j = 0; j < x.length - 1 - i; j++) {
+                if (x[j] >= x[j + 1]) {
+                    temp = x[j];
+                    x[j] = x[j + 1];
+                    x[j + 1] = temp;
+                }
+            }
+            z[i] = x[j];
+        }
+        z[i] = x[0];
+        System.out.println("\nthe sorted array is");
+        for (i = 0; i < z.length; i++) {
+            System.out.print("\t" + z[i]);
+        }
+    }
+
+    static void sort1(int x[][]) {
+        int i, j, temp, last, t[], z[], k = 0;
+        int s = 9;
+        t = new int[s];
+        z = new int[s];
+        System.out.println("the normal matrix is:\n");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                t[k] = x[i][j];
+                k++;
+            }
+        }
+
+        System.out.println("the sorted matrix is:\n");
+        for (k = 0; k < 9; k++) {
+            System.out.print("\t" + t[k]);
+        }
+        for (i = 0; i < t.length - 1; i++) {
+            for (j = 0; j < t.length - 1 - i; j++) {
+                if (t[j] >= t[j + 1]) {
+                    temp = t[j];
+                    t[j] = t[j + 1];
+                    t[j + 1] = temp;
+                }
+            }
+            z[i] = t[j];
+        }
+        z[i] = t[0];
+        System.out.println("\nthe sorted array is");
+        for (i = 0; i < z.length; i++) {
+            System.out.print("\t" + z[i]);
+        }
+        k = 0;
+        System.out.println("");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < x[i].length; j++) {
+                x[i][j] = z[k];
+                k++;
+                System.out.print("\t" + x[i][j]);
+            }
+            System.out.println("");
+        }
+    }
+
+    public static void main(String... s) {
+        sort(new int[]{10, 3, 7, 9});
+        sort1(new int[][]{{90, 30, 10}, {20, 3, 43}, {34, 22, 89}});
+    }
+}
Index: src/practicejdk8/com/array/UnionArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/UnionArray.java b/src/practicejdk8/com/array/UnionArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/UnionArray.java	
@@ -0,0 +1,43 @@
+package practicejdk8.com.array;
+
+public class UnionArray {
+
+    public static void uni(int x[], int y[]) {
+        int i, j, k, temp = 0, count = 0, z[], m[], t[];
+        k = x.length + y.length;
+        z = new int[k];
+        m = new int[k];
+        t = new int[k];
+        t[0] = 0;
+        System.out.println("\nthe first array is:");
+        for (i = 0; i < x.length; i++) {
+            System.out.print("  " + x[i]);
+        }
+        System.out.println("\nthe second array is:");
+        for (i = 0; i < y.length; i++) {
+            System.out.print("  " + y[i]);
+        }
+        for (i = 0; i < x.length; i++) {
+            z[i] = x[i];
+        }
+        for (i = 0; i < y.length; i++) {
+            z[x.length + i] = y[i];
+        }
+        System.out.println("\ntheir union are:\n");
+        for (i = 0; i < z.length; i++) {
+            if (t[i] == 0) {
+                count = 1;
+                for (j = i + 1; j < z.length; j++) {
+                    if (z[i] == z[j]) {
+                        count++;
+                        t[j] = 1;
+                    }
+                }
+                System.out.print("  " + z[i]);
+            }
+        }
+    }
+    public static void main(String... s) {
+        uni(new int[]{10, 89, 39, 2}, new int[]{12, 39, 2, 30, 10, 3, 3, 3, 2});
+    }
+}
Index: src/practicejdk8/com/array/ArrayTriangleWise.java
===================================================================
diff --git a/src/practicejdk8/com/array/ArrayTriangleWise.java b/src/practicejdk8/com/array/ArrayTriangleWise.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/ArrayTriangleWise.java	
@@ -0,0 +1,23 @@
+package practicejdk8.com.array;
+
+public class ArrayTriangleWise {
+
+    public static void trngwise(int x[]) {
+        int i, j;
+        System.out.println("\nthe normal array is");
+        for (i = 0; i < x.length; i++) {
+            System.out.print("  " + x[i]);
+        }
+        System.out.println("\nthe trainglewise elements of array is");
+        for (i = 0; i < x.length; i++) {
+            for (j = 0; j < i + 1; j++) {
+                System.out.print("  " + x[j]);
+            }
+            System.out.println("");
+        }
+    }
+
+    public static void main(String... s) {
+        trngwise(new int[]{10, 3, 7, 9, 12, 43, 89, 2, 10, 2, 1});
+    }
+}
Index: src/practicejdk8/com/array/NonRepeatingArray.java
===================================================================
diff --git a/src/practicejdk8/com/array/NonRepeatingArray.java b/src/practicejdk8/com/array/NonRepeatingArray.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/array/NonRepeatingArray.java	
@@ -0,0 +1,29 @@
+package practicejdk8.com.array;
+
+public class NonRepeatingArray {
+
+   public static void non(int x[]) {
+        int i, j, t = 0;
+        System.out.println("\nthe normal array is");
+        for (i = 0; i < x.length; i++) {
+            System.out.print("  " + x[i]);
+        }
+        System.out.print("\nthe first non repeating element is:  ");
+        for (i = 0; i < x.length; i++) {
+            t = 0;
+            for (j = i + 1; j < x.length; j++) {
+                if (x[i] == x[j] && t == 0) {
+                    t = 1;
+                    break;
+                }
+            }
+            if (j == x.length) {
+                System.out.print(x[i]);
+                break;
+            }
+        }
+    }
+    public static void main(String... s) {
+        non(new int[]{10, 3, 7, 9, 3, 10, 3, 13, 8});
+    }
+}
Index: src/practicejdk8/com/string/StringReverse.java
===================================================================
diff --git a/src/practicejdk8/com/string/StringReverse.java b/src/practicejdk8/com/string/StringReverse.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/string/StringReverse.java	
@@ -0,0 +1,24 @@
+package practicejdk8.com.string;
+
+public class StringReverse {
+
+    static String reverse(String s)
+        {
+            System.out.println(s);
+            char ch[]=s.toCharArray();
+            char ch1[]=new char[ch.length];
+
+            int count=0;
+            for(int i=ch.length-1;i>=0;i--)
+            {
+                ch1[count]=ch[i];
+                count++;
+            }
+            String s1=new String(ch1);
+            return s1;
+        }
+    public static void main(String[] args) {
+       String reverVlaue= reverse("kundan");
+        System.out.println("reverse String is "+reverVlaue);
+    }
+}
Index: src/practicejdk8/com/string/StringSortedWord.java
===================================================================
diff --git a/src/practicejdk8/com/string/StringSortedWord.java b/src/practicejdk8/com/string/StringSortedWord.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/string/StringSortedWord.java	
@@ -0,0 +1,34 @@
+package practicejdk8.com.string;
+
+public class StringSortedWord {
+
+    static String sortedWord(String s)
+        {
+            System.out.println(s);
+            String s1[]=s.split(" ");
+
+            String Temp=null;
+            String st=" ";
+            for(int i=0;i<s1.length-1;i++)
+            {
+                for(int j=i+1;j<s1.length;j++)
+                {
+                    if(s1[j].compareTo(s1[i])<0)
+                    {
+                        Temp=s1[i];
+                        s1[i]=s1[j];
+                        s1[j]=Temp;
+                    }
+                }
+                st=st+" "+s1[i];
+            }
+
+            st=st+" "+s1[s1.length-1];
+
+            return st;
+        }
+    public static void main(String[] args) {
+        String sortedWorld = sortedWord("kundan kumar");
+        System.out.println("sortedWorld " +sortedWorld);
+    }
+}
Index: src/practicejdk8/com/string/StringSorted.java
===================================================================
diff --git a/src/practicejdk8/com/string/StringSorted.java b/src/practicejdk8/com/string/StringSorted.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/string/StringSorted.java	
@@ -0,0 +1,28 @@
+package practicejdk8.com.string;
+
+public class StringSorted {
+    static void sortedorder(String s)
+        {
+            System.out.println(s);
+            char ch[]=s.toCharArray();
+            char Temp='a';
+            for(int i=0;i<ch.length-1;i++)
+            {
+                for(int j=i+1;j<ch.length;j++)
+                {
+                    if(ch[i]>ch[j])
+                    {
+                        Temp=ch[i];
+                        ch[i]=ch[j];
+                        ch[j]=Temp;
+                    }
+                }
+            }
+            String s1=new String(ch);
+            System.out.println("After sorting String is :" +s1);
+        }
+
+    public static void main(String[] args) {
+        sortedorder("kundan");
+    }
+}
Index: src/practicejdk8/com/string/StringCharCount.java
===================================================================
diff --git a/src/practicejdk8/com/string/StringCharCount.java b/src/practicejdk8/com/string/StringCharCount.java
new file mode 100644
--- /dev/null	
+++ b/src/practicejdk8/com/string/StringCharCount.java	
@@ -0,0 +1,25 @@
+package practicejdk8.com.string;
+
+public class StringCharCount {
+
+    static int charCount(String s)
+        {
+            System.out.println(s);
+            char ch[]=s.toCharArray();
+
+            int charcount=0;
+            for(int i=0;i<ch.length;i++)
+            {
+                if(ch[i]==' ')
+                    continue;
+                else
+                    charcount=charcount+1;
+            }
+            return charcount;
+        }
+
+    public static void main(String[] args) {
+       int charCounts= charCount("kundan");
+        System.out.println("char count is :"+charCounts);
+    }
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"1c194955-aa6b-4c5d-b8f4-e94044430a00\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2K1vbo2uVgvlnqRy29mxLd9acIs\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\"\n  }\n}]]></component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"1c194955-aa6b-4c5d-b8f4-e94044430a00\" name=\"Changes\" comment=\"\" />\n      <created>1673154977626</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1673154977626</updated>\n    </task>\n    <servers />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -1,13 +1,102 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
-    <list default="true" id="1c194955-aa6b-4c5d-b8f4-e94044430a00" name="Changes" comment="" />
+    <list default="true" id="26061b9b-10cd-49a2-b960-6e1e0b4b8f8a" name="Changes" comment="comit for  string">
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/Array.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/Array1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/ArrayFrequency.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/ArrayShift.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/ArraySort.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/ArrayTriangle.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/ArrayTriangleWise.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/DiagonalwiseArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/LcmArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/MAtrixMergeArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/MatrixArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/MatrixArrayMax.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/MatrixTransposeArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/MaxAndMinArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/MaxMinArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/NonRepeatingArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/array/UnionArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/string/StringCharCount.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/string/StringLength.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/string/StringReverse.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/string/StringSorted.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/string/StringSortedWord.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/string/StringTraingle1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/practicejdk8/com/string/StringWordSpaceCount.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/ArrayTest.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/ArrayTest.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/BookController$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/BookController$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/BookController.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/BookController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/DemoString.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/DemoString.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/ParallelStreamTest.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/ParallelStreamTest.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/RecursionTest.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/RecursionTest.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/StreamTest.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/StreamTest.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/StremDemo.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/StremDemo.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/controller/Test.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/controller/Test.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/Demo.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/Demo.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/FabonacciSeriesJava.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/FabonacciSeriesJava.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop1.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop10.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop10.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop11.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop11.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop12.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop12.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop13.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop13.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop14.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop14.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop15.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop15.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop16.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop16.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop17.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop17.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop18.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop18.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop19.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop19.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop2.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop2.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop20.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop20.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop21.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop21.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop3.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop3.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop4.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop4.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop5.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop5.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop6.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop6.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop7.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop7.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop8.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop8.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop9.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/dataStructure/PatternWhileLoop9.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/DaemonThread.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/DaemonThread.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/Multithread.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/Multithread.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread1.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread3$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread3$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread3.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThread3.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThreadDeadlock.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/MyThreadDeadlock.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/Sender.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/Sender.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/SyncDemo.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/SyncDemo.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/ThreadedSend.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/multithreading/ThreadedSend.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/service/BookService.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/service/BookService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/service/DemoService.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/service/DemoService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/practicejdk8/com/service/TestService.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/practicejdk8/com/service/TestService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/practicejdk8/com/dataStructure/FabonacciSeriesJava.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/practicejdk8/com/dataStructure/FabonacciSeriesJava.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ProjectId" id="2K1vbo2uVgvlnqRy29mxLd9acIs" />
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="2K3SkDtlRGr5P68YuN4g8iWmooh" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -15,18 +104,142 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true"
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "last_opened_file_path": "/home/kundant/Kundan/practicejdk8/practicejdk8/src/practicejdk8/com/array",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.17146146",
+    "settings.editor.selected.configurable": "configurable.group.other"
   }
 }]]></component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/src/practicejdk8/com/array" />
+    </key>
+  </component>
+  <component name="RunManager" selected="Application.UnionArray">
+    <configuration name="ArrayShift" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="practicejdk8.com.array.ArrayShift" />
+      <module name="practicejdk8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="practicejdk8.com.array.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="ArrayTriangle" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="practicejdk8.com.array.ArrayTriangle" />
+      <module name="practicejdk8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="practicejdk8.com.array.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="ArrayTriangleWise" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="practicejdk8.com.array.ArrayTriangleWise" />
+      <module name="practicejdk8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="practicejdk8.com.array.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="MaxMinArray" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="practicejdk8.com.array.MaxMinArray" />
+      <module name="practicejdk8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="practicejdk8.com.array.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="UnionArray" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="practicejdk8.com.array.UnionArray" />
+      <module name="practicejdk8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="practicejdk8.com.array.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.UnionArray" />
+        <item itemvalue="Application.ArrayTriangleWise" />
+        <item itemvalue="Application.ArrayTriangle" />
+        <item itemvalue="Application.ArrayShift" />
+        <item itemvalue="Application.MaxMinArray" />
+      </list>
+    </recent_temporary>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="1c194955-aa6b-4c5d-b8f4-e94044430a00" name="Changes" comment="" />
-      <created>1673154977626</created>
+      <changelist id="26061b9b-10cd-49a2-b960-6e1e0b4b8f8a" name="Changes" comment="" />
+      <created>1673201917440</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1673154977626</updated>
+      <updated>1673201917440</updated>
     </task>
+    <task id="LOCAL-00001" summary="comit for  string">
+      <created>1674307913967</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1674307913967</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="comit for  string" />
+    <option name="LAST_COMMIT_MESSAGE" value="comit for  string" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/practicejdk8/com/string/StringCharCount.java</url>
+          <line>12</line>
+          <option name="timeStamp" value="1" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/practicejdk8/com/string/StringCharCount.java</url>
+          <line>10</line>
+          <option name="timeStamp" value="2" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/practicejdk8/com/string/StringExpersion.java</url>
+          <line>12</line>
+          <option name="timeStamp" value="3" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/practicejdk8$StringTriangle.ic" NAME="StringTriangle Coverage Results" MODIFIED="1673970957485" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
+      <FILTER>practicejdk8.com.array.*</FILTER>
+    </SUITE>
+  </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
 </project>
\ No newline at end of file
